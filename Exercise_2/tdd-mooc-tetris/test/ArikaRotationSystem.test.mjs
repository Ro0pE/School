import { expect } from "chai";
import { Board } from "../src/Board.mjs";
import { Tetromino } from "../src/Tetromino.mjs";

function fallToBottom(board) {
    for (let i = 0; i < 10; i++) {
      board.tick();
    }
  }
  describe("Rotating different tetrominoes", () => {
    let board;
    beforeEach(() => {
      board = new Board(10, 6);
    });
    it("Drop T:start from the top middle", () => {
        board.drop(Tetromino.T_SHAPE);
    
        expect(board.toString()).to.equalShape(
          `..........
           ...TTT....
           ....T.....
           ..........
           ..........
           ..........`
        );
      });
      it("Rotate T right / clockwise", () => {
        board.drop(Tetromino.T_SHAPE);
        board.rotateRight()
    
        expect(board.toString()).to.equalShape(
          `....T.....
           ...TT.....
           ....T.....
           ..........
           ..........
           ..........`
        );
      });
    it("Rotate T right / clockwise x 2", () => {
        board.drop(Tetromino.T_SHAPE);
        board.rotateRight()
        board.rotateRight()
    
        expect(board.toString()).to.equalShape(
          `..........
           ....T.....
           ...TTT....
           ..........
           ..........
           ..........`
        );
      });
      it("Rotate T right / clockwise x 3", () => {
        board.drop(Tetromino.T_SHAPE);
        board.rotateRight()
        board.rotateRight()
        board.rotateRight()
    
        expect(board.toString()).to.equalShape(
          `....T.....
           ....TT....
           ....T.....
           ..........
           ..........
           ..........`
        );
      });
      it("Rotate T right / clockwise x 4", () => {
        board.drop(Tetromino.T_SHAPE);
        board.rotateRight()
        board.rotateRight()
        board.rotateRight()
        board.rotateRight()
    
        expect(board.toString()).to.equalShape(
          `..........
           ...TTT....
           ....T.....
           ..........
           ..........
           ..........`
        );
      });
      it("Rotate T right / clockwise x 5", () => {
        board.drop(Tetromino.T_SHAPE);
        board.rotateRight()
        board.rotateRight()
        board.rotateRight()
        board.rotateRight()
        board.rotateRight()
    
        expect(board.toString()).to.equalShape(
          `....T.....
           ...TT.....
           ....T.....
           ..........
           ..........
           ..........`
        );
      });
    it("Rotate T left / counter-clockwise", () => {
        board.drop(Tetromino.T_SHAPE);
        board.rotateLeft()
    
        expect(board.toString()).to.equalShape(
          `....T.....
           ....TT....
           ....T.....
           ..........
           ..........
           ..........`
        );
      });
     it("Rotate T left and then right", () => {
        board.drop(Tetromino.T_SHAPE);
        board.rotateLeft()
        board.rotateRight()
    
        expect(board.toString()).to.equalShape(
          `..........
           ...TTT....
           ....T.....
           ..........
           ..........
           ..........`
        );
      });
      it("Rotate T left / counter-clockwise x 2", () => {
        board.drop(Tetromino.T_SHAPE);
        board.rotateLeft()
        board.rotateLeft()
    
        expect(board.toString()).to.equalShape(
          `..........
           ....T.....
           ...TTT....
           ..........
           ..........
           ..........`
        );
      });
      it("Rotate T left / counter-clockwise x 3", () => {
        board.drop(Tetromino.T_SHAPE);
        board.rotateLeft()
        board.rotateLeft()
        board.rotateLeft()
    
        expect(board.toString()).to.equalShape(
          `....T.....
           ...TT.....
           ....T.....
           ..........
           ..........
           ..........`
        );
      });
      it("Rotate T left / counter-clockwise x 4", () => {
        board.drop(Tetromino.T_SHAPE);
        board.rotateLeft()
        board.rotateLeft()
        board.rotateLeft()
        board.rotateLeft()
    
        expect(board.toString()).to.equalShape(
          `..........
           ...TTT....
           ....T.....
           ..........
           ..........
           ..........`
        );
      });
      it("Rotate T left,right, right and left", () => {
        board.drop(Tetromino.T_SHAPE);
        board.rotateLeft()
        board.rotateRight()
        board.rotateRight()
        board.rotateLeft()
    
        expect(board.toString()).to.equalShape(
          `..........
           ...TTT....
           ....T.....
           ..........
           ..........
           ..........`
        );
      });

});
/*
  describe("Dropping different tetrominoes", () => {
    let board;
    beforeEach(() => {
      board = new Board(10, 6);
    });
    xit("Drop T:start from the top middle", () => {
        board.drop(Tetromino.T_SHAPE);
    
        expect(board.toString()).to.equalShape(
          `..........
           ...TTT....
           ....T.....
           ..........
           ..........
           ..........`
        );
      });
      xit("start from the top middle, move down", () => {
        board.drop(Tetromino.T_SHAPE);
        board.moveDown()
    
        expect(board.toString()).to.equalShape(
          `..........
           ..........
           ...TTT....
           ....T.....
           ..........
           ..........`
        );
      });
      xit("Drop I:start from the top middle", () => {
        board.drop(Tetromino.I_SHAPE);
    
        expect(board.toString()).to.equalShape(
          `..........
           ...IIII...
           ..........
           ..........
           ..........
           ..........`
        );
      });
      xit("start from the top middle, move down", () => {
        board.drop(Tetromino.I_SHAPE);
        board.moveDown()
    
        expect(board.toString()).to.equalShape(
          `..........
           ..........
           ...IIII...
           ..........
           ..........
           ..........`
        );
      });
      xit("Drop S:start from the top middle", () => {
        board.drop(Tetromino.S_SHAPE);
    
        expect(board.toString()).to.equalShape(
          `..........
           ....SS....
           ...SS.....
           ..........
           ..........
           ..........`
        );
      });
      xit("start from the top middle, move down", () => {
        board.drop(Tetromino.S_SHAPE);
        board.moveDown()
    
        expect(board.toString()).to.equalShape(
          `..........
           ..........
           ....SS....
           ...SS.....
           ..........
           ..........`
        );
      });
      xit("Drop Z:start from the top middle", () => {
        board.drop(Tetromino.Z_SHAPE);
    
        expect(board.toString()).to.equalShape(
          `..........
           ...ZZ.....
           ....ZZ....
           ..........
           ..........
           ..........`
        );
      });
     xit("start from the top middle, move down", () => {
        board.drop(Tetromino.Z_SHAPE);
        board.moveDown()
    
        expect(board.toString()).to.equalShape(
          `..........
           ..........
           ...ZZ.....
           ....ZZ....
           ..........
           ..........`
        );
      });
      xit("Drop O:start from the top middle", () => {
        board.drop(Tetromino.O_SHAPE);
    
        expect(board.toString()).to.equalShape(
          `..........
           ....OO....
           ....OO....
           ..........
           ..........
           ..........`
        );
      });
      xit("start from the top middle, move down", () => {
        board.drop(Tetromino.O_SHAPE);
        board.moveDown()
    
        expect(board.toString()).to.equalShape(
          `..........
           ..........
           ....OO....
           ....OO....
           ..........
           ..........`
        );
      });
      xit("Drop L:start from the top middle", () => {
        board.drop(Tetromino.L_SHAPE);
    
        expect(board.toString()).to.equalShape(
          `..........
           ...LLL....
           ...L......
           ..........
           ..........
           ..........`
        );
      });
      xit("start from the top middle, move down", () => {
        board.drop(Tetromino.L_SHAPE);
        board.moveDown()
    
        expect(board.toString()).to.equalShape(
          `..........
           ..........
           ...LLL....
           ...L......
           ..........
           ..........`
        );
      });
      it("Drop J:start from the top middle", () => {
        board.drop(Tetromino.J_SHAPE);
    
        expect(board.toString()).to.equalShape(
          `..........
           ...JJJ....
           .....J....
           ..........
           ..........
           ..........`
        );
      });
      it("start from the top middle, move down", () => {
        board.drop(Tetromino.J_SHAPE);
        board.moveDown()
    
        expect(board.toString()).to.equalShape(
          `..........
           ..........
           ...JJJ....
           .....J....
           ..........
           ..........`
        );
      });
    });*/